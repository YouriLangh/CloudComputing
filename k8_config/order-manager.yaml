apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: order-manager
spec:
  serviceName: "order-manager-service"
  replicas: 1 
  selector:
    matchLabels:
      app: order-manager
  template:
    metadata:
      labels:
        app: order-manager
    spec:
      containers:
        - name: order-manager-container
          image: order-manager:latest
          imagePullPolicy: Never
          env:
            - name: RABBITMQ_HOST
              value: rabbitmq-service  # Use the service name
            - name: RABBITMQ_PORT
              value: "5673"
            - name: RABBITMQ_ORDERBOOK_QUEUE
              value: orderbook_queue
            - name: RABBITMQ_MANAGER_QUEUE
              value: order_manager_queue
            - name: REDIS_HOST
              value: redis  # Your Redis service name
            - name: REDIS_PORT
              value: "6379"         # Default Redis port
          volumeMounts:
            - name: order-data-volume
              mountPath: /app/data  # Mount the volume to the app's directory
          resources:
            limits:
              cpu: 350m
              memory: 128M
            requests:
              cpu: 200m
              memory: 80M

  volumeClaimTemplates:
    - metadata:
        name: order-data-volume
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi  # Define the size of the persistent volume (adjust as needed)

---
apiVersion: v1
kind: Service
metadata:
  name: order-manager-service
spec:
  selector:
    app: order-manager
  type: ClusterIP
  ports:
    - port: 9999            # The port exposed by the service inside the cluster
      targetPort: 9999       # The port the container listens on 
      protocol: TCP

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: order-manager-hpa
  namespace: default  # Specify the namespace
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: order-manager  # Name of the StatefulSet to scale
  minReplicas: 1  # Minimum number of replicas
  maxReplicas: 5  # Maximum number of replicas
  metrics:
    - type: Resource
      resource:
        name: cpu  # Can also use memory if you prefer
        target:
          type: Utilization
          averageUtilization: 80  # Trigger scaling when CPU utilization exceeds 80%
